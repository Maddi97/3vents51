name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build_backend:
    #    needs: analyze
    name: Build And Push Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.dockerhub_user }}
          password: ${{ secrets.dockerhub_password }}

      - name: Build Backend Docker Containers
        uses: docker/build-push-action@v2
        with:
          platforms: linux/x86_64
          context: https://github.com/Maddi97/Evento.git#develop:backend
          file: ./prod.Dockerfile
          push: true
          tags: ${{secrets.dockerhub_user}}/evento_backend:latest

  build_frontend:
    #needs: analyze
    name: Build And Push Events
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.dockerhub_user }}
          password: ${{ secrets.dockerhub_password }}

      - name: Build Frontend Docker Containers
        uses: docker/build-push-action@v2
        with:
          platforms: linux/x86_64
          context: https://github.com/Maddi97/Evento.git#develop:evento_frontend
          file: ./prod.Dockerfile
          push: true
          tags: ${{secrets.dockerhub_user}}/evento_frontend:latest

  build_insert-app:
    # needs: analyze
    name: Build And Push Insert
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.dockerhub_user }}
          password: ${{ secrets.dockerhub_password }}

      - name: Build Insert-App Docker Containers
        uses: docker/build-push-action@v2
        with:
          platforms: linux/x86_64
          context: https://github.com/Maddi97/Evento.git#develop:evento_insert
          file: ./prod.Dockerfile
          push: true
          tags: ${{secrets.dockerhub_user}}/evento_insert:latest

  deploy:
    needs: [build_frontend, build_insert-app, build_backend]
    name: Deploy
    runs-on: netcup_runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.dockerhub_user }}
          password: ${{ secrets.dockerhub_password }}

      - name: Pull Backend Docker Container
        run: docker pull ${{secrets.dockerhub_user}}/evento_backend:latest

      - name: Pull Frontend  Docker Containers
        run: docker pull ${{secrets.dockerhub_user}}/evento_frontend:latest

      - name: Pull Insert-App Docker Container
        run: docker pull ${{secrets.dockerhub_user}}/evento_insert:latest

      - name: Create Environment File
        env:
          auth_secret: ${{secrets.AUTH_SECRET}}
          auth_signupkey: ${{secrets.AUTH_SIGNUPKEY}}
          browse_ai_api_key: ${{secrets.BROWSE_AI_API_KEY}}

        run: |
          touch .env.prod
          echo "DUCKDNSTOKEN=$duckdns_token" >> .env.prod
          echo "SIGNUPKEY=$auth_signupkey" >> .env.prod
          echo "SECRET=$auth_secret" >> .env.prod
          echo "BROWSE_AI_API_KEY=$browse_ai_api_key" >> .env.prod

      - name: Start Docker Containers
        uses: nick-fields/retry@v2
        with:
          max_attempts: 10
          retry_on: error
          timeout_seconds: 500
          command: docker compose --env-file .env.prod -f docker-compose-prod.yml up -d
